cmake_minimum_required(VERSION 3.25)

SET(PROJECT_NAME eregion)

PROJECT(${PROJECT_NAME})

# Set C++ Standard
SET(CMAKE_CXX_STANDARD 23)
SET(CMAKE_CXX_STANDARD_REQUIRED ON)

# Set Output Directory
SET(OUT_DIR out)
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/${OUT_DIR}/bin)
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/${OUT_DIR}/lib)
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/${OUT_DIR}/lib)

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${CMAKE_SOURCE_DIR}/${OUT_DIR}/bin/Debug)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_SOURCE_DIR}/${OUT_DIR}/bin/Release)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG ${CMAKE_SOURCE_DIR}/${OUT_DIR}/lib/Debug)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE ${CMAKE_SOURCE_DIR}/${OUT_DIR}/lib/Release)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${CMAKE_SOURCE_DIR}/${OUT_DIR}/lib/Debug)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${CMAKE_SOURCE_DIR}/${OUT_DIR}/lib/Release)

# Import CMake Scripts
SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_SOURCE_DIR}/cmake/)

# External libraries
FIND_PACKAGE(OpenGL REQUIRED)
FIND_PACKAGE(GLM REQUIRED)
FIND_PACKAGE(GLFW3 REQUIRED)
FIND_PACKAGE(Freetype REQUIRED)

# GLAD (Bundled)
ADD_LIBRARY(GLAD ${CMAKE_SOURCE_DIR}/third-party/lib/glad/gl.c)

INCLUDE_DIRECTORIES(
    ${CMAKE_SOURCE_DIR}/${ROOT_DIR}/include
    ${CMAKE_SOURCE_DIR}/${ROOT_DIR}/third-party/include/glad/
    ${CMAKE_SOURCE_DIR}/${ROOT_DIR}/third-party/include/khr/
    ${CMAKE_SOURCE_DIR}/${ROOT_DIR}/third-party/include/glm/
    ${CMAKE_SOURCE_DIR}/${ROOT_DIR}/third-party/include/lin-math/
    ${CMAKE_SOURCE_DIR}/${ROOT_DIR}/third-party/include/stb_image/
    ${CMAKE_SOURCE_DIR}/${ROOT_DIR}/third-party/include/freetype/
    ${CMAKE_SOURCE_DIR}/${ROOT_DIR}/third-party/include/freetype/freetype/
    ${CMAKE_SOURCE_DIR}/${ROOT_DIR}/third-party/include/freetype/freetype/config
    ${CMAKE_SOURCE_DIR}/${ROOT_DIR}/third-party/include/freetype/freetype/internal
    ${CMAKE_SOURCE_DIR}/${ROOT_DIR}/third-party/include/freetype/freetype/internal/services
    /usr/include/GLFW
)

# File Retrieival
LINK_DIRECTORIES(${CMAKE_SOURCE_DIR}/lib)
FILE(GLOB_RECURSE PROJECT_SOURCES ${CMAKE_SOURCE_DIR}/lib/*.cpp)
FILE(GLOB_RECURSE PROJECT_HEADERS ${CMAKE_SOURCE_DIR}/include/*.hpp)
FILE(GLOB_RECURSE THIRD_PARTY_SOURCES ${CMAKE_SOURCE_DIR}/third-party/lib/*.c)
FILE(GLOB_RECURSE THIRD_PARTY_HEADERS ${CMAKE_SOURCE_DIR}/third-party/include/*.h)

# Add Include Directories
ADD_LIBRARY(${PROJECT_NAME} SHARED ${PROJECT_SOURCES} ${THIRD_PARTY_SOURCES})

TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PUBLIC ${GLFW3_LIBRARY} GLAD ${OPENGL_LIBRARY} ${CMAKE_DL_LIBS} ${FREETYPE_LIBRARIES})

SET(LIBRARIES ${LIBRARIES} ${OPENGL_LIBRARIES})

# Install
INSTALL(TARGETS ${PROJECT_NAME}
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib)

INSTALL(DIRECTORY ${CMAKE_SOURCE_DIR}/include/
    DESTINATION include
    FILES_MATCHING PATTERN "*.hpp")

INSTALL(DIRECTORY ${CMAKE_SOURCE_DIR}/third-party/include/
    DESTINATION include/thirdparty
    FILES_MATCHING PATTERN "*.h")

INSTALL(FILES ${CMAKE_SOURCE_DIR}/third-party/lib/glad/gl.c
    DESTINATION lib)

set(CPACK_PACKAGE_DIRECTORY ${CMAKE_SOURCE_DIR}/${OUT_DIR})

# Packaging
INCLUDE(CPack)

SET(CPACK_PACKAGE_NAME ${PROJECT_NAME})

set(CPACK_PACKAGE_DESCRIPTION "Eregion Game Engine")
set(CPACK_PACKAGE_VENDOR "Eregion")

# Get version
INCLUDE(EregionVersion)
SET(CPACK_PACKAGE_VERSION ${EREGION_VERSION_MAJOR}.${EREGION_VERSION_MINOR}.${EREGION_VERSION_PATCH})
SET(CPACK_PACKAGE_VERSION_MAJOR ${EREGION_VERSION_MAJOR})
SET(CPACK_PACKAGE_VERSION_MINOR ${EREGION_VERSION_MINOR})
SET(CPACK_PACKAGE_VERSION_PATCH ${EREGION_VERSION_PATCH})

SET(CPACK_PACKAGE_FILE_NAME ${PROJECT_NAME}-${EREGION_VERSION_MAJOR}.${EREGION_VERSION_MINOR}.${EREGION_VERSION_PATCH}-${EREGION_VERSION_SUFFIX})

SET(CPACK_PACKAGE_LICENSE "APACHE")
SET(CPACK_RESOURCE_FILE_LICENSE ${CMAKE_CURRENT_SOURCE_DIR}/LICENSE-APACHE.txt)

SET(CPACK_GENERATOR "TGZ;ZIP")